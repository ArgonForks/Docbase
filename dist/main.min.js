/*! 04-08-2015 */
(function($,angular){var jWindow=$(window);var angApp;var exports=this;var Docbase=exports.Docbase={};var Events=Docbase.events={};var Route=Docbase.route={};Docbase.methods=["file","github"];Docbase.run=function(options){var defaults={method:"github",path:"docs",map:{file:"map.json",path:"docs"},github:{path:"/",branch:"gh-pages",editGithubBtn:true},html5mode:false,indexType:"html",indexSrc:"v1/path/index.md",indexHtml:"html/main.html",flatdocHtml:"html/flatdoc.html",angularAppName:"docbaseApp"};options=$.extend({},defaults,options);if(options.method==="github"){if(!options.github.user||!options.github.repo){throw"Missing GitHub user/repo info."}}Docbase.methods.forEach(function(method){var properties=options[method];Object.keys(properties).forEach(function(key){properties[key]=cutTrailingSlashes(properties[key])})});options.map.path=cutTrailingSlashes(options.map.path);options.path=cutTrailingSlashes(options.path);Docbase.options=options;Events.bind();angApp=angular.module(options.angularAppName,["ngRoute"]).factory("FlatdocService",["$q","$route","$location","$anchorScroll",Route.fetch]).controller("URLCtrl",["$scope","$location","data",Route.URLCtrl]).controller("MainCtrl",["$scope","$location","$timeout",Route.mainCtrl]).config(["$routeProvider","$locationProvider",Route.config]).run(["$rootScope","$location","$routeParams","$anchorScroll","$route",Route.anchorConfig]);Docbase[options.method](options[options.method])};Docbase.github=function(options){githubTree(options,function(error,map){if(error){Docbase.file(Docbase.options.map)}else if(checkSchema(map)){Docbase.map=map;$.get(Docbase.options.map.path+"/"+Docbase.options.map.file).success(function(fileMap){var ghMap=Docbase.map;var fileMapVer=Object.keys(fileMap);fileMapVer.forEach(function(fileVer){if(ghMap[fileVer]){ghMap[fileVer].forEach(function(category){var categoryM=fileMap[fileVer].filter(function(_category){return _category.name===category.name})[0];if(categoryM&&categoryM.label){category.label=categoryM.label;category.files.forEach(function(file){var fileM=categoryM.files.filter(function(_file){return _file.name===file.name})[0];if(fileM&&fileM.label)file.label=fileM.label})}})}});jWindow.trigger("mapped");Events.bind()}).error(function(error){jWindow.trigger("mapped");Events.bind()})}else{throw"GitHub tree mapping error."}})};Docbase.file=function(options){$.get(options.path+"/"+(options.src||options.file)).success(function(map){if(checkSchema(map)){var v=Object.keys(map);if(v.length&&map[v[0]][0].files.length&&map[v[0]][0].files[0].name){Docbase.map=map;jWindow.trigger("mapped");Events.bind()}else{throw"Map does not have a file entry. Check the documentation"}}else{throw"Map file schema error. Check the documentation."}}).error(function(error){throw error})};Events.switchBind=function(state){jWindow[state]("flatdoc:ready",Events.ready);jWindow[state]("ajaxError",Events.ajaxError)};Events.bind=function(){Events.switchBind("on")};Events.unbind=function(){Events.switchBind("off")};Events.ready=function(){jWindow.trigger("docbase:ready")};Events.ajaxError=function(event,request){if(request.status===403&&Docbase.options.method==="github"){console.error("Github API quota exceeded.")}};Route.config=function($routeProvider,$location,$rootScope,$anchorScroll){var flatdocURL=Docbase.options.flatdocHtml;var mainURL=Docbase.options.indexHtml;var resolve={data:function(FlatdocService){return FlatdocService.getData().then(function(data){return data})}};$routeProvider.when("/:version/:folder/:file",{templateUrl:flatdocURL,controller:"URLCtrl",resolve:resolve}).when("/:version/:folder",{templateUrl:flatdocURL,controller:"URLCtrl",resolve:resolve}).when("/:version",{templateUrl:flatdocURL,controller:"URLCtrl",resolve:resolve}).when("/",{templateUrl:mainURL,controller:"MainCtrl"}).otherwise({redirectTo:"/"});$location.html5Mode(Docbase.options.html5mode)};Route.anchorConfig=function($rootScope,$location,$routeParams,$anchorScroll,$route){$rootScope.$on("$locationChangeStart",function(evnt,newRoute,oldRoute){var firstRoute=newRoute.split("#");var hash=firstRoute[firstRoute.length-1];firstRoute.splice(firstRoute.length-1,1);firstRoute=firstRoute.join("#");var secondRoute=oldRoute.split("#");secondRoute.splice(secondRoute.length===2?2:secondRoute.length-1,1);secondRoute=secondRoute.join("#");if(firstRoute===secondRoute&&newRoute!==oldRoute){$location.hash(hash);var lastRoute=$route.current;var unbind=$rootScope.$on("$locationChangeSuccess",function(){$route.current=lastRoute;unbind()});$anchorScroll()}});$rootScope.$on("$routeChangeSuccess",function(newRoute,oldRoute){jWindow.on("docbase:ready",function(){$anchorScroll();$(".content").find("pre code").each(function(){$(this).addClass("prettyprint")});prettyPrint()})})};Route.fetch=function($q,$route,$location,$anchorScroll){function fetcher(){var deferred=$q.defer();var options=Docbase.options;if(Docbase.map){mapLoaded()}else{jWindow.on("mapped",mapLoaded)}function mapLoaded(){var map=Docbase.map;var retObj={};var currentVersion=$route.current.params.version;var versions=Object.keys(map);var location=Route.updatePath($route.current.params);retObj.versions=versions;retObj.currentVersion=currentVersion||versions[versions.length-1];retObj.map=map;retObj.locationPath=location.path;if(!location.fail){var options=Docbase.options;var gh=Docbase.options.github;var url="https://github.com/"+gh.user+"/"+gh.repo+"/tree/"+gh.branch+"/"+options.path+location.path+".md";retObj.github=url;Events.parsed=false;Flatdoc.file(options.path+location.path+".md")(function(err,markdown){markdown=markdown.split("\n");var obj=markdown.shift();obj=obj.replace(/\u201D/g,'"');obj=obj.replace(/\u201C/g,'"');try{obj=JSON.parse(obj)}catch(e){markdown.unshift(obj);obj={threeColumns:false}}markdown=markdown.join("\n");if(obj.threeColumns){$("body").removeClass("no-literate")}else{$("body").addClass("no-literate")}var data=Flatdoc.parser.parse(markdown,function(code){return Flatdoc.highlighters.generic(code)});retObj.markdown=data;deferred.resolve(retObj)})}else{retObj.github=false;deferred.resolve(retObj)}}return deferred.promise}return{getData:function(){return new fetcher}}};Route.URLCtrl=function($scope,$location,data){$location.path(data.locationPath);if(!data.fail){$scope.versions=data.versions;$scope.currentVersion=data.currentVersion;$scope.map=data.map;$scope.github=data.github;var content=data.markdown;$('[role="flatdoc-content"]').html(content.content.find(">*"));$('[role="flatdoc-menu"]').html(Flatdoc.menuView(content.menu));jWindow.trigger("flatdoc:ready")}};Route.mainCtrl=function($scope,$location,$timeout){if(Docbase.options.indexType==="markdown"){var path=Docbase.options.indexSrc;if(endsWith(path,".md")){path=path.substring(0,path.length-3)}if(path.charAt(0)!=="/"){path="/"+path}$location.path(path)}else{var onMapped=function(){$timeout(function(){$scope.map=Docbase.map;$scope.versions=Object.keys($scope.map);$scope.currentVersion=$scope.versions[0]})};if(Docbase.map){onMapped()}else{jWindow.on("mapped",onMapped)}}};Route.updatePath=function(params){var map=Docbase.map;var version=params.version;var folder=params.folder;var file=params.file;if(!map[version]){console.error("Version not mapped.");return{path:"/",fail:true}}var mapFolder;if(folder){mapFolder=map[version].filter(function(folders){return folders.name===folder});if(!mapFolder.length){console.error("Folder not mapped.");return{path:"/"+version,fail:true}}}if(file){var mapFile=mapFolder[0].files.filter(function(files){return files.name===file});if(!mapFile.length){console.error("File not mapped.");return{path:"/"+version+"/"+file,fail:true}}}folder=folder||map[version][0].name;var folderObj=map[version].filter(function(each){return each.name===folder})[0];file=file||folderObj.files[0].name;var path="/"+version+"/"+folder+"/"+file;return{path:path,fail:false}};function cutTrailingSlashes(value){if(!angular.isString(value)){return value}value=value.charAt(0)==="/"?value.substring(1):value;return endsWith(value,"/")?value.substring(0,value.length-1):value}function checkSchema(map){return schema({"*":Array.of(schema({name:String,label:String,files:Array.of(schema({name:String,label:String}))}))})(map)}function githubTree(options,callback){var full_path=options.path;var path=full_path.split("/");var deleted=path.splice(path.length-1,1);path.join("/");deleted=deleted[0];var baseurl="https://api.github.com/repos/"+options.user+"/"+options.repo+"/";var url=baseurl+"contents/"+path;$.get(url,{ref:options.branch}).success(function(data){var sha=data.filter(function(each){return each.name===deleted})[0].sha;$.get(baseurl+"git/trees/"+sha+"?recursive=1").success(function(tree){tree=tree.tree.filter(function(each){return endsWith(each.path,".md")});var map={};tree.forEach(function(each){var sub_path=each.path.split("/");if(sub_path.length>=3){var version=sub_path[0];var folder=sub_path[1];var file=sub_path[2].substring(0,sub_path[2].length-3);if(!map[version]){map[version]=[]}if(!map[version].filter(function(a){return a.name===folder}).length){map[version].push({label:folder,name:folder,files:[]})}map[version].forEach(function(each){if(each.name===folder)each.files.push({name:file,label:file})})}});callback(null,map)}).error(function(error){callback(error)})}).error(function(error){callback(error)})}function endsWith(subjectString,searchString,position){if(position===undefined||position>subjectString.length){position=subjectString.length}position-=searchString.length;var lastIndex=subjectString.indexOf(searchString,position);return lastIndex!==-1&&lastIndex===position}})(window.jQuery,window.angular);(function($){var $window=$(window);var $document=$(document);$window.on("docbase:ready",runTheme);function runTheme(){$("h2, h3").scrollagent({offset:100},function(cid,pid,currentElement,previousElement){if(pid){$("[pref='#"+pid+"']").removeClass("active")}if(cid){$("[pref='#"+cid+"']").addClass("active")}});$(".menu a").each(function(){var el=$(this);var href=el.attr("href");if(href&&!el.attr("pref")){var location=window.location.href.split("#");if(location.length<=2){location=location.join("#")+href}else{location[location.length-1]=href.substring(1);location=location.join("#")}el.attr("href",location);el.attr("pref",href)}});var $sidebar=$(".menubar");var elTop;$window.on("resize.sidestick",function(){$sidebar.removeClass("fixed");elTop=$sidebar.offset().top;$window.trigger("scroll.sidestick")}).on("scroll.sidestick",function(){var scrollY=$window.scrollTop();$sidebar.toggleClass("fixed",scrollY>=elTop-35)}).trigger("resize.sidestick")}})(window.jQuery);(function($){$.fn.scrollagent=function(options,callback){var $window=$(window);if(typeof callback==="undefined"){callback=options;options={}}var $sections=$(this);var $parent=options.parent||$(window);var offsets=[];$sections.each(function(i){var offset=$(this).attr("data-anchor-offset")?parseInt($(this).attr("data-anchor-offset"),10):options.offset||0;offsets.push({id:$(this).attr("id"),index:i,el:this,offset:offset})});var current=null;var height=null;var range=null;function refreshSize(){height=$parent.height();range=$(document).height()}function refreshScroll(){var y=$parent.scrollTop();y+=height*(.3+.7*Math.pow(y/range,2));var latest=null;for(var i in offsets){if(offsets.hasOwnProperty(i)){var offset=offsets[i];if($(offset.el).offset().top+offset.offset<y)latest=offset}}if(latest&&(!current||latest.index!==current.index)){callback.call($sections,latest?latest.id:null,current?current.id:null,latest?latest.el:null,current?current.el:null);current=latest}}$window.on("scroll",$.throttle(50,refreshScroll));$window.on("resize",$.throttle(250,refreshSize));refreshSize();refreshScroll();return this}})(jQuery);(function(b,c){var $=b.jQuery||b.Cowboy||(b.Cowboy={}),a;$.throttle=a=function(e,f,j,i){var h,d=0;if(typeof f!=="boolean"){i=j;j=f;f=c}function g(){var o=this,m=+new Date-d,n=arguments;function l(){d=+new Date;j.apply(o,n)}function k(){h=c}if(i&&!h){l()}h&&clearTimeout(h);if(i===c&&m>e){l()}else{if(f!==true){h=setTimeout(i?k:l,i===c?e-m:e)}}}if($.guid){g.guid=j.guid=j.guid||$.guid++}return g};$.debounce=function(d,e,f){return f===c?a(d,e,false):a(d,f,e!==false)}})(this);if(!Function.prototype.bind){Function.prototype.bind=function bind(that){var slice=[].slice;var Empty=function(){};var target=this;if(typeof target!="function"){throw new TypeError("Function.prototype.bind called on incompatible "+target)}var args=slice.call(arguments,1);var bound=function(){if(this instanceof bound){var result=target.apply(this,args.concat(slice.call(arguments)));if(Object(result)===result){return result}return this}else{return target.apply(that,args.concat(slice.call(arguments)))}};if(target.prototype){Empty.prototype=target.prototype;bound.prototype=new Empty;Empty.prototype=null}return bound}}