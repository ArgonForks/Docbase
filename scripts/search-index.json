[
   {
      "title":"Step 0: Creating an App",
      "link":"http://localhost/appbase-work/Docs/index.html#/scalr/javascript/javascript-intro#quick-start-to-the-js-api-step-0-creating-an-app",
      "version":"scalr",
      "document_path":"https://github.com/appbaseio/Docs/tree/master/src/scalr/javascript/javascript-intro.md",
      "content":"<h2 id=\"quick-start-to-the-js-api-step-0-creating-an-app\">Step 0: Creating an App</h2><p><a href=\"https://imgflip.com/gif/opgl9\"><img src=\"https://i.imgflip.com/opgl9.gif\"></a><br>Log in to <span class=\"fa fa-external-link\"></span> <a href=\"http://appbase.io/scalr/\">Appbase Dashboard</a>, and create a new app.</p><p>For this tutorial, we will use an app called “createnewtestapp01”. The &lt;username&gt;:&lt;password&gt; combination for this app is RIvfxo1u1:dee8ee52-8b75-4b5b-be4f-9df3c364f59f.</p><blockquote>\n<p>SCALR uses <em>HTTP Basic Auth</em>, a widely used protocol for a simple username/password authentication.</p>\n</blockquote>"
   },
   {
      "title":"Step 1: Lib Setup",
      "link":"http://localhost/appbase-work/Docs/index.html#/scalr/javascript/javascript-intro#quick-start-to-the-js-api-step-1-lib-setup",
      "version":"scalr",
      "document_path":"https://github.com/appbaseio/Docs/tree/master/src/scalr/javascript/javascript-intro.md",
      "content":"<h2 id=\"quick-start-to-the-js-api-step-1-lib-setup\">Step 1: Lib Setup</h2><p>We will fetch and install the <strong>appbase-js</strong> lib using <a href=\"http://bower.io\">bower</a>. We will use <code>v0.8.0</code> for specificity. </p><pre><code class=\"lang-js\">bower install appbase-js<span class=\"comment\">#<span class=\"number\"><span class=\"number\">0</span>.<span class=\"number\">8</span></span>.<span class=\"number\">0</span></span></code></pre><p>Requiring the lib takes just one line of html script injection:</p><pre><code class=\"lang-html\">&lt;script src=<span class=\"string\">\"bower_components/appbase-js/browser/appbase.js\"</span>&gt;&lt;/script&gt;</code></pre><p>To write data or stream updates from <a href=\"https://appbase.io\">appbase.io</a>, we need to first create a reference object. We do this by passing the API URL, appname, and a username:password combination into the <code>Appbase</code> constructor:</p><pre><code class=\"lang-js\">var appbase = new Appbase({\n  url: <span class=\"string\">'https:<span class=\"comment\">//scalr.api.appbase.io'</span>,</span>\n  appname: <span class=\"string\">'createnewtestapp<span class=\"number\">01</span>'</span>,\n  username: <span class=\"string\">'RIvfxo<span class=\"number\">1</span>u<span class=\"number\">1</span>'</span>,\n  password: <span class=\"string\">'dee<span class=\"number\">8</span>ee<span class=\"number\">52</span>-<span class=\"number\">8</span>b<span class=\"number\">75</span>-<span class=\"number\">4</span>b<span class=\"number\">5</span>b-be<span class=\"number\">4</span>f-<span class=\"number\">9</span>df<span class=\"number\">3</span>c<span class=\"number\">364</span>f<span class=\"number\">59</span>f'</span>\n});</code></pre><p><strong>OR</strong></p><pre><code class=\"lang-js\">var appbase = new Appbase({\n  url: <span class=\"string\">'https:<span class=\"comment\">//RIvfxo<span class=\"number\">1</span>u<span class=\"number\">1</span>:dee<span class=\"number\">8</span>ee<span class=\"number\">52</span>-<span class=\"number\">8</span>b<span class=\"number\">75</span>-<span class=\"number\">4</span>b<span class=\"number\">5</span>b-be<span class=\"number\">4</span>f-<span class=\"number\">9</span>df<span class=\"number\">3</span>c<span class=\"number\">364</span>f<span class=\"number\">59</span>f@scalr.api.appbase.io'</span>,</span>\n  appname: <span class=\"string\">'createnewtestapp<span class=\"number\">01</span>'</span>\n })</code></pre><p>Alternatively, username:password can be passed as a part of the API URL in the constructor.</p>"
   },
   {
      "title":"Step 2: Storing Data",
      "link":"http://localhost/appbase-work/Docs/index.html#/scalr/javascript/javascript-intro#quick-start-to-the-js-api-step-2-storing-data",
      "version":"scalr",
      "document_path":"https://github.com/appbaseio/Docs/tree/master/src/scalr/javascript/javascript-intro.md",
      "content":"<h2 id=\"quick-start-to-the-js-api-step-2-storing-data\">Step 2: Storing Data</h2><p>Once we have the reference object (called <code>appbase</code> in this tutorial), we can insert any JSON object into it with the <code>index()</code> method.</p><pre><code class=\"lang-js\">var jsonObject = {\n    <span class=\"string\">\"department_name\"</span>:<span class=\"string\">\"Books\"</span>,\n    <span class=\"string\">\"department_name_analyzed\"</span>:<span class=\"string\">\"Books\"</span>,\n    <span class=\"string\">\"department_id\"</span>:<span class=\"number\">1</span>,\n    <span class=\"string\">\"name\"</span>:<span class=\"string\">\"A Fake Book on Network Routing\"</span>,\n    <span class=\"string\">\"price\"</span>:<span class=\"number\">5595</span>\n}</code></pre><pre><code>appbase.index({\n    type: 'books',\n    id: '1',\n    body: jsonObject\n}).on('data', function(response) {\n    console.log(response);\n}).on('error', function(error) {\n    console.log(error);\n});</code></pre><p>where <code>type: 'books'</code> indicate the collection (or table) inside which the data will be stored and the<code>id: '1'</code> is an optional unique identifier.</p><p>The <code>index()</code> method (and all the other <code>appbase</code> methods) return a <a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">stream</a> object. A ‘data’ event handler can be used on the returned object (or in a chained fashion) for listening to all the data changes.</p><blockquote>\n<p><span class=\"fa fa-info-circle\"></span> If you have noticed, SCALR uses the same APIs and data modeling conventions as <a href=\"https://www.elastic.co/products/elasticsearch\">ElasticSearch</a>. A <strong>type</strong> is equivalent to a <em>collection in MongoDB</em> or a <em>table in SQL</em>, and a document is similar to the document in MongoDB and equivalent to a <em>row in SQL</em>.</p>\n</blockquote>"
   },
   {
      "title":"Step 3: GETing err, Streaming Data",
      "link":"http://localhost/appbase-work/Docs/index.html#/scalr/javascript/javascript-intro#quick-start-to-the-js-api-step-3-geting-err-streaming-data",
      "version":"scalr",
      "document_path":"https://github.com/appbaseio/Docs/tree/master/src/scalr/javascript/javascript-intro.md",
      "content":"<h2 id=\"quick-start-to-the-js-api-step-3-geting-err-streaming-data\">Step 3: <s>GETing</s> err, Streaming Data</h2><p>Now that we are able to store data, let’s try to get the data back from <a href=\"https://appbase.io\">appbase.io</a> with the <code>readStream()</code> method.</p><pre><code class=\"lang-js\">appbase.readStream({\n      type: <span class=\"string\">'books'</span>,\n      id: <span class=\"string\">'<span class=\"number\">1</span>'</span>\n}).on(<span class=\"string\">'data'</span>, function(response) {\n      console.log(response)\n}).on(<span class=\"string\">'error'</span>, function(error) {\n      console.log(error)\n})\n\n\nINITIAL RESPONSE\n{\n  <span class=\"string\">\"_index\"</span>: <span class=\"string\">\"app`<span class=\"number\">248</span>\"</span>,\n  <span class=\"string\">\"_type\"</span>: <span class=\"string\">\"books\"</span>,\n  <span class=\"string\">\"_id\"</span>: <span class=\"string\">\"<span class=\"number\">1</span>\"</span>,\n  <span class=\"string\">\"_version\"</span>: <span class=\"number\">5</span>,\n  <span class=\"string\">\"found\"</span>: true,\n  <span class=\"string\">\"_source\"</span>: {\n    <span class=\"string\">\"department_name\"</span>: <span class=\"string\">\"Books\"</span>,\n    <span class=\"string\">\"department_name_analyzed\"</span>: <span class=\"string\">\"Books\"</span>,\n    <span class=\"string\">\"department_id\"</span>: <span class=\"number\">1</span>,\n    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"A Fake Book on Network Routing\"</span>,\n    <span class=\"string\">\"price\"</span>: <span class=\"number\">5595</span>\n  }\n}</code></pre><p>Now everytime there is a document update, our ‘data’ event handler will emit the document with the final value.</p><h3 id=\"quick-start-to-the-js-api-step-3-geting-err-streaming-data-3a-modify-the-document\">3.a: Modify the Document</h3><p>Let’s see this in action. We will modify the book price in our original <code>jsonObject</code> variable from 5595 to 6034.</p><pre><code class=\"lang-js\">var jsonObject = {\n    <span class=\"string\">\"department_name\"</span>:<span class=\"string\">\"Books\"</span>,\n    <span class=\"string\">\"department_name_analyzed\"</span>:<span class=\"string\">\"Books\"</span>,\n    <span class=\"string\">\"department_id\"</span>:<span class=\"number\">1</span>,\n    <span class=\"string\">\"name\"</span>:<span class=\"string\">\"A Fake Book on Network Routing\"</span>,\n    <span class=\"string\">\"price\"</span>:<span class=\"number\">6034</span>\n  }</code></pre><h3 id=\"quick-start-to-the-js-api-step-3-geting-err-streaming-data-3b-observe-the-streams\">3.b: Observe the Streams</h3><pre><code class=\"lang-js\">RESPONSE AFTER <span class=\"number\">3</span>.a\n{\n  <span class=\"string\">\"_type\"</span>: <span class=\"string\">\"books\"</span>,\n  <span class=\"string\">\"_id\"</span>: <span class=\"string\">\"<span class=\"number\">1</span>\"</span>,\n  <span class=\"string\">\"_source\"</span>: {\n    <span class=\"string\">\"department_id\"</span>: <span class=\"number\">1</span>,\n    <span class=\"string\">\"department_name\"</span>: <span class=\"string\">\"Books\"</span>,\n    <span class=\"string\">\"department_name_analyzed\"</span>: <span class=\"string\">\"Books\"</span>,\n    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"A Fake Book on Network Routing\"</span>,\n    <span class=\"string\">\"price\"</span>: <span class=\"number\">6034</span>\n  }\n}</code></pre><p>In the new document update, we can see the price change (5595 -&gt; 6034) being reflected. Subsequent changes will be streamed as JSON objects.</p><p><code>Note:</code> Appbase always streams the final state of an object, and not the diff b/w the old state and the new state. You can compute diffs on the client side by keeping the state using the composition of (_type, _id) fields.</p>"
   },
   {
      "title":"Step 4: Streaming Rich Queries",
      "link":"http://localhost/appbase-work/Docs/index.html#/scalr/javascript/javascript-intro#quick-start-to-the-js-api-step-4-streaming-rich-queries",
      "version":"scalr",
      "document_path":"https://github.com/appbaseio/Docs/tree/master/src/scalr/javascript/javascript-intro.md",
      "content":"<h2 id=\"quick-start-to-the-js-api-step-4-streaming-rich-queries\">Step 4: Streaming Rich Queries</h2><p>Streaming document updates are great for building messaging systems or notification feeds on individual objects. What if we were interested in continuously listening to a broader set of data? The <code>searchStream()</code> method scratches this itch perfectly. </p><p>In the example below, we will see it in action with a <code>match_all</code> query that returns any time a new document is added to the type ‘books’ or when any of the existing documents are modified.</p><pre><code class=\"lang-js\">appbase.searchStream({\n    type: <span class=\"string\">'books'</span>,\n    body: {\n        query: {\n            match_all: {}\n        }\n    }\n}).on(<span class=\"string\">'data'</span>, function(response) {\n    console.log(response);\n}).on(<span class=\"string\">'error'</span>, function(error) {\n    console.log(<span class=\"string\">\"caught a stream error\"</span>, error)\n})\n\nINITIAL RESPONSE\n{\n  <span class=\"string\">\"took\"</span>: <span class=\"number\">1</span>,\n  <span class=\"string\">\"timed_out\"</span>: false,\n  <span class=\"string\">\"_shards\"</span>: {\n    <span class=\"string\">\"total\"</span>: <span class=\"number\">1</span>,\n    <span class=\"string\">\"successful\"</span>: <span class=\"number\">1</span>,\n    <span class=\"string\">\"failed\"</span>: <span class=\"number\">0</span>\n  },\n  <span class=\"string\">\"hits\"</span>: {\n    <span class=\"string\">\"total\"</span>: <span class=\"number\">1</span>,\n    <span class=\"string\">\"max_score\"</span>: <span class=\"number\">1</span>,\n    <span class=\"string\">\"hits\"</span>: [\n      {\n        <span class=\"string\">\"_index\"</span>: <span class=\"string\">\"app`<span class=\"number\">248</span>\"</span>,\n        <span class=\"string\">\"_type\"</span>: <span class=\"string\">\"books\"</span>,\n        <span class=\"string\">\"_id\"</span>: <span class=\"string\">\"<span class=\"number\">1</span>\"</span>,\n        <span class=\"string\">\"_score\"</span>: <span class=\"number\">1</span>,\n        <span class=\"string\">\"_source\"</span>: {\n          <span class=\"string\">\"price\"</span>: <span class=\"number\">6034</span>,\n          <span class=\"string\">\"department_name\"</span>: <span class=\"string\">\"Books\"</span>,\n          <span class=\"string\">\"department_name_analyzed\"</span>: <span class=\"string\">\"Books\"</span>,\n          <span class=\"string\">\"department_id\"</span>: <span class=\"number\">1</span>,\n          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"A Fake Book on Network Routing\"</span>\n        }\n      }\n    ]\n  }\n}</code></pre><p>In this tutorial, we have learnt how to index new data and stream both individual data and results of an expressive query. <a href=\"https://appbase.io\">Appbase.io</a> supports a wide range of queries.</p><p>For next steps, check out our <a href=\"http://docs.appbase.io/scalr/javascript/api-reference.html\">Javascript API reference</a> or take a look at the <span class=\"fa fa-external-link-square\"></span><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html\">ElasticSearch JS reference</a> for a deeper dive.</p>"
   }
]